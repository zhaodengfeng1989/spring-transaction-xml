package com.zhaodf;import com.zhaodf.beans.Emp;import org.junit.Before;import org.junit.Test;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.RowMapper;import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * 类：TestIoc * * @author zhaodf * @date 2021/1/21 */public class TestJDBC {    //ApplicationContext 容器顶层核心接口    //ClassPathXmlApplicationContext 从项目的资源文件中加载xml配置文件来初始化IoC容器    //FileSystemXmlApplicationContext 从本地（电脑）的磁盘路径加载xml配置文件来初始化IoC容器    //AnnotationConfigApplicationContext 使用注解配置的方式来初始化IoC容器    //在容器实例化的时候就会加载所有的bean,如何证明？如果在打印“Spring容器加载完成”前先打印User无参构造的“User已加载”    ClassPathXmlApplicationContext ioc;    @Before    public void before(){        ioc = new ClassPathXmlApplicationContext("spring.xml");        System.out.println("Spring容器加载完成");    }    @Test    public void test01(){        JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);        String sql = "insert into emp(empno,empname,salary) values(?,?,?)";        jdbcTemplate.update(sql,2,"zhangsan1","1500");    }    @Test    public void test02(){        JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);        String sql = "insert into emp(empno,empname,salary) values(?,?,?)";        List<Object[]> list = new ArrayList<Object[]>();        list.add(new Object[]{3,"zhangsan3","3500"});        list.add(new Object[]{4,"zhangsan4","4500"});        list.add(new Object[]{5,"zhangsan5","5500"});        jdbcTemplate.batchUpdate(sql,list);    }    @Test    public void test03(){        JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);        String sql = "select * from emp where empno = ?";        Emp emp = jdbcTemplate.queryForObject(sql,new BeanPropertyRowMapper<Emp>(Emp.class),1);        System.out.println(emp);    }    @Test    public void test04(){        JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);        String sql = "select * from emp where empno > ?";        //数据库字段名和属性名一致时候可使用，利用BeanPropertyRowMapper传入一个你需要自动映射的类型//        List<Emp> query = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Emp.class), 3);//        for (Emp emp : query) {//            System.out.println(emp);//        }        //当数据库字段名和属性名不一致时可用        List<Emp> query = jdbcTemplate.query(sql, (RowMapper) (resultSet, i) -> {            Emp emp = new Emp();            emp.setEmpNo(resultSet.getInt("empno"));            emp.setEmpName(resultSet.getString("empname"));            return emp;        },3);        for (Emp emp : query) {            System.out.println(emp);        }    }    @Test    public void test05(){        JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);        String sql = "select max(empno) from emp";        Integer max = jdbcTemplate.queryForObject(sql, Integer.class);        System.out.println(max);    }    @Test    public void test06(){        NamedParameterJdbcTemplate namedParameterJdbcTemplate = ioc.getBean(NamedParameterJdbcTemplate.class);        String sql = "select count(*) from emp where empname = :empname and empno = :empno";        //SqlParameterSource namedParameters = new MapSqlParameterSource("empname", "zhangsan1");        HashMap<String, Object> namedParameters = new HashMap<>();        namedParameters.put("empno",1);        namedParameters.put("empname","zhangsan1");        Integer count = namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer.class);        System.out.println(count);    }}