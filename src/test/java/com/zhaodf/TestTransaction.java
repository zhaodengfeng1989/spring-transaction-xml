package com.zhaodf;import com.zhaodf.beans.Emp;import com.zhaodf.service.EmpService;import com.zhaodf.service.LogService;import org.junit.Before;import org.junit.Test;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.RowMapper;import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * 类：TestIoc * * @author zhaodf * @date 2021/1/21 */public class TestTransaction {    //ApplicationContext 容器顶层核心接口    //ClassPathXmlApplicationContext 从项目的资源文件中加载xml配置文件来初始化IoC容器    //FileSystemXmlApplicationContext 从本地（电脑）的磁盘路径加载xml配置文件来初始化IoC容器    //AnnotationConfigApplicationContext 使用注解配置的方式来初始化IoC容器    //在容器实例化的时候就会加载所有的bean,如何证明？如果在打印“Spring容器加载完成”前先打印User无参构造的“User已加载”    ClassPathXmlApplicationContext ioc;    @Before    public void before(){        ioc = new ClassPathXmlApplicationContext("spring.xml");        System.out.println("Spring容器加载完成");    }    @Test    public void test01(){        EmpService empService = ioc.getBean("empService",EmpService.class);        empService.transf();    }    @Test    public void test02(){        LogService logService = ioc.getBean("logService",LogService.class);        logService.log();    }}